/* eslint-disable */
export default async () => {
    const t = {
        ["./api/user/schema/friend-request.schema"]: await import("./api/user/schema/friend-request.schema"),
        ["./common/dto/response.dto"]: await import("./common/dto/response.dto"),
        ["./api/socket/schema/chat-history.schema"]: await import("./api/socket/schema/chat-history.schema"),
        ["./api/user/dto/user.dto"]: await import("./api/user/dto/user.dto")
    };
    return { "@nestjs/swagger": { "models": [[import("./api/user/schema/user.schema"), { "User": { email: { required: true, type: () => String }, username: { required: true, type: () => String }, password: { required: true, type: () => String }, avatar: { required: true, type: () => String }, createdAt: { required: true, type: () => Number }, githubId: { required: true, type: () => Number } } }], [import("./api/user/dto/user.dto"), { "FindUserByEmailDto": { email: { required: true, type: () => String } }, "createUserDto": { password: { required: true, type: () => String }, code: { required: true, type: () => String }, confirm_password: { required: true, type: () => String } }, "GithubUserDto": { githubId: { required: true, type: () => Number }, username: { required: true, type: () => String }, avatar: { required: true, type: () => String }, email: { required: true, type: () => String } }, "UserDto": { email: { required: true, type: () => String }, username: { required: true, type: () => String }, avatar: { required: true, type: () => String }, createdAt: { required: true, type: () => Number }, githubId: { required: true, type: () => Number }, _id: { required: true, type: () => require("mongoose").Types.ObjectId } }, "GitHubAccessToken": { access_token: { required: true, type: () => String }, token_type: { required: true, type: () => String }, scope: { required: true, type: () => String } } }], [import("./api/user/schema/friend-request.schema"), { "FriendRequest": { senderId: { required: true, type: () => require("mongoose").Types.ObjectId }, receiverId: { required: true, type: () => require("mongoose").Types.ObjectId }, description: { required: true, type: () => String }, createdAt: { required: true, type: () => Number }, status: { required: true, enum: t["./api/user/schema/friend-request.schema"].FriendRequestStatus } } }], [import("./api/user/dto/send-friend-request.dto"), { "CreateFriendRequestDto": { senderId: { required: true, type: () => String }, receiverId: { required: true, type: () => String }, description: { required: true, type: () => String, minLength: 10, maxLength: 500 } }, "UpdateFriendRequestStatusDto": { status: { required: true, enum: t["./api/user/schema/friend-request.schema"].FriendRequestStatus } } }], [import("./api/user/schema/friends.schema"), { "Friends": { user_id: { required: true, type: () => require("mongoose").Types.ObjectId }, friend_id: { required: true, type: () => require("mongoose").Types.ObjectId }, createAt: { required: true, type: () => Number } } }], [import("./common/dto/response.dto"), { "ResponseDto": { code: { required: false, type: () => Number }, message: { required: false, type: () => String }, data: { required: false }, timestamp: { required: false, type: () => Number } }, "RequestDetailsDto": { query: { required: true, type: () => Object }, body: { required: true, type: () => Object }, params: { required: true, type: () => Object }, method: { required: true, type: () => String }, url: { required: true, type: () => String }, timestamp: { required: true, type: () => Number }, ip: { required: true, type: () => String } }, "ErrorResponseDto": { code: { required: true, type: () => Number }, message: { required: true, type: () => String }, data: { required: true, type: () => t["./common/dto/response.dto"].RequestDetailsDto } } }], [import("./api/auth/dto/auto.dto"), { "SendVerificationCodeDto": { account: { required: true, type: () => String } }, "VerificationResponseDto": { verificationId: { required: true, type: () => String } }, "SendVerificationCodeResponseDto": { status: { required: true, type: () => String }, expiresIn: { required: true, type: () => Number } }, "EmailLoginDto": { email: { required: true, type: () => String }, captcha: { required: true, type: () => String } }, "LoginResponseDto": { access_token: { required: true, type: () => String }, refresh_token: { required: true, type: () => String }, expiresIn: { required: true, type: () => Number } } }], [import("./api/socket/schema/chat-history.schema"), { "ChatHistory": { content: { required: true, type: () => String }, senderId: { required: true, type: () => String }, receiverId: { required: false, type: () => String }, chatroomId: { required: false, type: () => String }, sendTime: { required: true, type: () => Number }, updateTime: { required: true, type: () => Number }, isRead: { required: true, type: () => Boolean }, type: { required: true, enum: t["./api/socket/schema/chat-history.schema"].MessageType } } }], [import("./api/socket/dto/create-message.dto"), { "CreateChatHistoryDto": { content: { required: true, type: () => String }, senderId: { required: true, type: () => String }, receiverId: { required: false, type: () => String }, chatroomId: { required: false, type: () => String }, sendTime: { required: false, type: () => String }, updateTime: { required: false, type: () => String }, isRead: { required: false, type: () => Boolean }, type: { required: true, enum: t["./api/socket/schema/chat-history.schema"].MessageType } } }], [import("./api/socket/dto/offline-notification.dto"), { "CreateOfflineNotificationDto": { receiverId: { required: true, type: () => String } } }], [import("./api/socket/schema/offline-notification.schema"), { "OfflineNotification": { userId: { required: true, type: () => String }, notification: { required: true, type: () => String }, createdAt: { required: true, type: () => Number } } }]], "controllers": [[import("./api/user/user.controller"), { "UserController": { "getUserInfo": { type: Object }, "sendFriendRequest": {}, "getFriendRequests": { type: [t["./api/user/schema/friend-request.schema"].FriendRequest] }, "updateFriendRequestStatus": {}, "searchUserByEmail": {} } }], [import("./api/auth/auth.controller"), { "AuthController": { "sendVerificationCode": {}, "emailLogin": {} } }]] } };
};